#!/usr/bin/env php
<?php

use Wave\Config;
use Wave\SDK\SchemaGenerator\Output\Swagger;
use Wave\SDK\SchemaGenerator\Parser\FromRoutes;
use Symfony\Component\Yaml\Yaml;

ini_set('display_errors', '1');
error_reporting(E_ALL | E_STRICT);

if(!file_exists('bootstrap.php'))
    sg_error("This file should be run from the application root");


$formats = array('json', 'yml', 'php');
$options = getopt('', array('format::', 'file::', 'dump-on-error'));

if(!isset($options['format']))
    $options['format'] = 'json';

if(!isset($options['file']))
    $options['file'] = "swagger.{$options['format']}";

if(!in_array($options['format'], $formats))
    sg_error(sprintf("Unknown output format [%s], accepts: [%s]", $options['format'], implode(', ', $formats)));

require 'bootstrap.php';

$paths = Config::get('wave')->path;

$parser = new FromRoutes($paths->controllers, $paths->schemas, SYS_ROOT . 'docs/');
$generator = new Swagger($parser);

$meta_info = [];
if(file_exists('composer.json')){
    $composer = json_decode(file_get_contents('composer.json'));
    $meta_info = [
        'title' => $composer->name,
        'description' => $composer->description
    ];
}

if('' !== $git_path = trim(shell_exec('which git'))){
    $meta_info['version'] = trim(shell_exec(sprintf('%s rev-parse --verify --short HEAD', $git_path)));
}

//If there's an AMQP routing key
if(Config::get('app')->offsetExists('amqp')){
    $meta_info['routing-key'] = Config::get('app')->amqp->routing_key;
}

$output = $generator->generate($meta_info);

$json_url = "http://json-schema.org/draft-04/schema#";
$json_schema = json_decode(file_get_contents(__DIR__ .'/../lib/json-schema-draft-04.json'));
$swagger_url = 'http://swagger.io/v2/schema.json#';
$swagger_schema = json_decode(file_get_contents(__DIR__ . '/../lib/swagger-2.0.json'));

$statham = new \Statham\Statham();
$statham->setRemoteReference($json_url, $json_schema);
$statham->setRemoteReference($swagger_url, $swagger_schema);

if(!$statham->validate(json_decode(json_encode($output)), $swagger_url)){
    fwrite(STDERR, json_encode($statham->report->errors, JSON_PRETTY_PRINT) . "\n");
    if(!array_key_exists('dump-on-error', $options))
        exit(2);
}

$formatted = '';
switch($options['format']){
    case 'json':
        $formatted = json_encode($output, JSON_PRETTY_PRINT);
        break;
    case 'yml':
        $formatted = Yaml::dump($output, PHP_INT_MAX);
        break;
    case 'php':
        $formatted = var_export($output);
        break;
}

$result = file_put_contents($options['file'], $formatted);
if (empty($result)) {
    sg_error("Failed to write schema to file {$options['file']}");
}

exit;

function sg_error($message, $exit = 1){
    fwrite(STDERR, "\033[31m{$message}\033[0m\n");
    if($exit >= 0)
        exit($exit);
}
