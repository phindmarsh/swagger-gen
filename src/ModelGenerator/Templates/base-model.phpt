<?php

/**
 * Model base class generated by the SDKGenerator\Generator.
 * Changes made to this file WILL BE OVERWRITTEN when the generator is run.
 * To add/override functionality, edit the child stub class.
 *
 */

namespace {{ namespace }}\Base;

use HellPizza\StyxSDK\Client\InvalidInputException;

abstract class {{ class }} extends {{ base_model }} {

{% for operation in operations %}
{% set body_params = operation.method in ['post', 'put', 'patch'] or operation.paramaters.body is not empty %}
{% set query_params = operation.method in ['get', 'head', 'delete'] or operation.paramaters.query is not empty %}

    /**
{% for line in operation.comment|explode('\n') %}     * {{ line }}{{ '\n' }}{% if loop.last %}{{ '     *\n' }}{% endif %}{% endfor %}
{% for param in operation.parameters.path      %}     * @param {{ param.type }} ${{ param.name }}{{ '\n' }}{% endfor %}
{% if query_params                             %}     * @param mixed[] $query
{% for param in operation.parameters.query     %}     *        ['{{ param.name }}'] {{ param.type }} {% if param.required %}required{% endif %}{% endfor %}
     *
{% endif %}
{% if body_params                              %}     * @param mixed[] $body
{% for param in operation.parameters.body      %}     *        ['{{ param.name }}'] {{ param.type }} {% if param.required %}required{% endif %}{{ '\n' }}{% endfor %}
{% endif %}
{% if operation.parameters.query is not empty or operation.parameters.body is not empty %}
     *
     * @throws InvalidInputException when required {% if query_params %}$query{% if body_params %} or {% endif %}{% endif %}{% if body_params %}$body{% endif %} params are not present
{% endif %}
     *
     * @return mixed|null
     */
	public static function {{ operation.function }}({% for param in operation.parameters.path %}${{ param.name }}, {% endfor %}{% if query_params %}array $query = array(){% if body_params %}, {% endif %}{% endif %}{% if body_params %}array $body = array(){% endif %}){

{% for type in ['query', 'body'] %}
{% if operation.parameters[type] %}
        static ${{ type }}_params = {{ operation.parameters[type]|var_export(2) }};
        $errors = [];
        foreach(${{ type }}_params as $param){
            if($param['required'] && !array_key_exists($param['name'], ${{ type }})){
                $errors[] = [ $param['name'] => [ 'reason' => 'missing' ]];
            }
        }
        if(!empty($errors)){
            throw new InvalidInputException($errors);
        }
{% endif %}
{% endfor %}

        $method = '{{ operation.method }}';
        $route = sprintf('{{ operation.path }}'{% if operation.path_replacements is not empty %}, {% endif %}{% for var,index in operation.path_replacements %}${{ var }}{% if not loop.last %}, {% endif %}{% endfor %});

        return self::_request($method, $route, {{ query_params ? '$query' : '[]' }}, {{ body_params ? '$body' : '[]' }});
    }

{% endfor %}

}